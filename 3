#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>

// Функция для вывода информации о процессе
void print_info(int process_number) {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    struct tm *tm = localtime(&ts.tv_sec);
    printf("Процесс %d: pid=%d, ppid=%d, время: %02d:%02d:%02d:%03ld\n",
           process_number, getpid(), getppid(),
           tm->tm_hour, tm->tm_min, tm->tm_sec, ts.tv_nsec / 1000000);
}

// Функция, выполняемая каждым процессом
void process_function(int process_number) {
    int sleep_time = process_number * 200;  // Время задержки
    while (1) {
        print_info(process_number);
        usleep(sleep_time * 1000);  // Перевод мс в мкс
    }
}

// Рекурсивное создание дерева процессов
void create_process_tree(int current_generation, int max_generations, int num_children, int process_number) {
    if (current_generation >= max_generations) {
        process_function(process_number); // Если достигли предела поколений, запускаем функцию
        exit(0); // Завершаем процесс после работы (никогда не достигнет сюда, т.к. бесконечный цикл)
    }

    for (int i = 0; i < num_children; i++) {
        pid_t pid = fork();
        if (pid == 0) { 
            // Дочерний процесс
            int new_process_number = process_number * 10 + i; // Уникальный номер процесса
            create_process_tree(current_generation + 1, max_generations, num_children, new_process_number);
        }
    }

    // Родитель ждет всех дочерних процессов
    while (wait(NULL) > 0);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Использование: %s <количество поколений> <количество потомков на процесс>\n", argv[0]);
        return 1;
    }

    int generations = atoi(argv[1]);  // Количество поколений
    int children = atoi(argv[2]);     // Количество потомков

    printf("Родительский процесс P1: pid=%d\n", getpid());

    create_process_tree(0, generations, children, 1);

    return 0;
}
